/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.polsl.wojtanek.Controller;

import java.awt.event.KeyEvent;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.table.DefaultTableModel;
import pl.polsl.wojtanek.Model.CircutPart;
import pl.polsl.wojtanek.Model.Coil;
import pl.polsl.wojtanek.Model.ComplexNumber;
import pl.polsl.wojtanek.Model.Condensator;
import pl.polsl.wojtanek.Model.FormatChecker;
import pl.polsl.wojtanek.Model.Resistor;
import pl.polsl.wojtanek.Model.WrongDataException;
import pl.polsl.wojtanek.Model.KeyBind;
import pl.polsl.wojtanek.View.View;

/**
 * This class represents a JFrame for a circuit simulation application. It
 * allows users to input circuit elements and calculate impedance. Author:
 * Miłosz
 */@Deprecated
public class JFrame extends javax.swing.JFrame {
    // Instance of CircutPart to manage circuit elements

    CircutPart CP = new CircutPart();

    /**
     * Creates new form JFrame
     */
    public JFrame() {
        initComponents();
        KeyBind.setKeyBindings(TextFrequency, TextValues1, TextValues2,jTable1);
        RButton1.setMnemonic(KeyEvent.VK_Q);
        RButton1.setMnemonic(KeyEvent.VK_W);
        Count.setMnemonic(KeyEvent.VK_ENTER);
Reset.setMnemonic(KeyEvent.VK_R);
Mode.setMnemonic(KeyEvent.VK_M);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        RButton1 = new javax.swing.JRadioButton();
        KButton1 = new javax.swing.JRadioButton();
        CButton1 = new javax.swing.JRadioButton();
        Count = new javax.swing.JButton();
        TextFrequency = new javax.swing.JTextField();
        TextValues1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        TextValues2 = new javax.swing.JTextField();
        RButton2 = new javax.swing.JRadioButton();
        KButton2 = new javax.swing.JRadioButton();
        CButton2 = new javax.swing.JRadioButton();
        Mode = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ImpeText = new javax.swing.JLabel();
        Reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(RButton1);
        RButton1.setText("Rezystor");
        RButton1.setToolTipText("Oblicza impedancje Rezystora Keybind ctrl + q");

        buttonGroup1.add(KButton1);
        KButton1.setText("Kondensator");
        KButton1.setToolTipText("Oblicza impedancje Kondensatora");

        buttonGroup1.add(CButton1);
        CButton1.setText("Cewka");
        CButton1.setToolTipText("Oblicza impedancje Cewki");

        Count.setText("Count");
        Count.setToolTipText("Oblicz impedancje podanych elementow Keybind enter");
        Count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountActionPerformed(evt);
            }
        });

        TextFrequency.setToolTipText("<html> UWAGA WYMAGANE<br> Podaj czestotliwosc ukladu<br  KeyBind ctrl+1<html>");

        TextValues1.setToolTipText("<html>\nPodaj wartosc <br>\nRezystor - Rezystancja<br>\n Kondensator - Pojemnosc kondensatora <br>\n Cewka - Indukcyjnosc<br>\nKeybind ctrl+2\n<html>");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Komponent", "Polaczenie", "Wartosc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("Table przedstawia chronologicznie podane elementy z typem, rodzajem polaczenia oraz wartoscia urzadzenia");
        jScrollPane1.setViewportView(jTable1);

        TextValues2.setToolTipText("<html>\nPodaj wartosc <br>\nRezystor - Rezystancja<br>\n Kondensator - Pojemnosc kondensatora <br>\n Cewka - Indukcyjnosc<br>\nKeybind ctrl+2\n<html>");

        buttonGroup2.add(RButton2);
        RButton2.setText("Rezystor");
        RButton2.setToolTipText("Oblicza impedancje Rezystora Keybind ctrl+W");

        buttonGroup2.add(KButton2);
        KButton2.setText("Kondensator");
        KButton2.setToolTipText("Oblicza impedancje Kondensatora");

        buttonGroup2.add(CButton2);
        CButton2.setText("Cewka");
        CButton2.setToolTipText("Oblicza impedancje Cewki");

        Mode.setText("Rownolegle");
        Mode.setToolTipText("Zmień typ polączenie kolejnych elementow  KeyBind M");
        Mode.setActionCommand("Rownolegle");
        Mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModeActionPerformed(evt);
            }
        });

        jLabel1.setText("Obecna impednajca zastepcza");

        ImpeText.setText("0");

        Reset.setText("Reset");
        Reset.setToolTipText("Zresetuj caly uklad Keybind R");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ImpeText, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(174, 174, 174))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(Count))
                            .addComponent(TextFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TextValues1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TextValues2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(KButton2)
                                    .addComponent(CButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(KButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RButton2)
                                    .addComponent(CButton2))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(Mode)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Reset)
                                .addGap(8, 8, 8)))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Mode))
                        .addGap(29, 29, 29)
                        .addComponent(RButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextValues1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CButton1)
                        .addGap(34, 34, 34)
                        .addComponent(RButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextValues2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KButton2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ImpeText))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Count)
                    .addComponent(Reset))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Performs an action when the Count button is pressed. Retrieves input
     * values, checks for valid format, calculates impedance, and updates the
     * interface.
     *
     * @param evt The ActionEvent triggered by pressing the Count button.
     */
    private void CountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountActionPerformed

        String FreqText = TextFrequency.getText();
        try {
            FormatChecker fc = new FormatChecker();
            fc.CheckFormat(FreqText);

            double Freq = Double.parseDouble(FreqText);

            if (!TextValues2.isEnabled()) {
                String ValueText1 = TextValues1.getText();
                fc.CheckFormat(ValueText1);

                double Value = Double.parseDouble(ValueText1);
                CheckComponent1(buttonGroup1, Value, Freq);

            } else {
                String ValueText1 = TextValues1.getText();
                String ValueText2 = TextValues2.getText();

                fc.CheckFormat(ValueText1);
                fc.CheckFormat(ValueText2);

                double Value1 = Double.parseDouble(ValueText1);
                double Value2 = Double.parseDouble(ValueText2);

                CheckComponent1(buttonGroup1, Value1, Freq);
                CheckComponent1(buttonGroup2, Value2, Freq);

            }
        } catch (WrongDataException e) {
            View view = new View();
            view.InputError(e);
        }

        CountImpe();

        ImpeText.setText(CP.getString());


    }//GEN-LAST:event_CountActionPerformed

    /**
     * Performs an action when the Mode button is pressed. Changes between type
     * that next elements impedation will be add.
     *
     * @param evt The ActionEvent triggered by pressing the Mode button.
     */
    private void ModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModeActionPerformed
        if (Mode.getText().equals("Szeregowo")) {
            RButton2.setEnabled(true);
            KButton2.setEnabled(true);
            CButton2.setEnabled(true);
            TextValues2.setEnabled(true);

            Mode.setText("Rownolegle");

        } else if (Mode.getText().equals("Rownolegle")) {
            RButton2.setEnabled(false);
            KButton2.setEnabled(false);
            CButton2.setEnabled(false);
            TextValues2.setEnabled(false);

            Mode.setText("Rownolegle CC");

        } else {
            RButton2.setEnabled(false);
            KButton2.setEnabled(false);
            CButton2.setEnabled(false);
            TextValues2.setEnabled(false);

            Mode.setText("Szeregowo");
        }
    }//GEN-LAST:event_ModeActionPerformed

    /**
     * Performs an action when the Reset button is pressed. Reset the values of
     * equivalent impedance and the list of componenets in table .
     *
     * @param evt The ActionEvent triggered by pressing the Reset button.
     */
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        CP.SetX(new ComplexNumber(0, 0));
        ImpeText.setText(CP.getString());

    }//GEN-LAST:event_ResetActionPerformed
    /**
     * Checks circuit components and calculates impedance based on the selected
     * component type.
     *
     * @param x The ButtonGroup containing the selected component type of
     * certain group.
     * @param a Array of double values representing the component parameters.
     */
    void CheckComponent1(ButtonGroup x, double... a) {
        ButtonModel selectedButton = x.getSelection();

        if (x.getSelection() != null) {
            Enumeration<AbstractButton> buttons = x.getElements();
            AbstractButton button = buttons.nextElement();

            while (true) {

                if (button.getModel().equals(x.getSelection())) {

                    switch (button.getText()) {
                        case "Rezystor":  {
                            Resistor R = new Resistor();
                            CP.AddToList(R.CountImpedation(a[0], 0));

                        }
                        case "Kondensator": {
                            Condensator K = new Condensator();
                            CP.AddToList(K.CountImpedation(a[1], a[0]));

                        }
                        case "Cewka":  {
                            Coil C = new Coil();
                            CP.AddToList(C.CountImpedation(a[1], a[0]));

                        }
                    }
                    DisplayValues(button.getText(), Mode.getText(), a[0]);
                    break;
                }

                button = buttons.nextElement();

            }

        } else {
            View view = new View();
            view.Show("Nie wybrano komponentu");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(model.getRowCount() - 1);

        }

    }

    /**
     * Calculates the total impedance based on the current mode (Series,
     * Parallel, or One in Parallel).
     */
    private void CountImpe() {

        if (Mode.getText().equals("Szeregowo")) {

            CP.InSeries();

        } else if (Mode.getText().equals("Rownolegle")) {
            CP.InParallel();
        } else {
            ComplexNumber CN = new ComplexNumber();
            if (CN.eaquals(CP.getX())) {
                View view = new View();
                view.Show("Brak komponentu do obliczen");
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.removeRow(model.getRowCount() - 1);
            } else {
                CP.OneInParallel();
            }
        }
    }

    /**
     *
     * Displays values of circuit elements in the table.
     *
     * @param x The component type.
     * @param y The connection mode (Series, Parallel, etc.).
     * @param z The value of the component.
     */
    public void DisplayValues(String x, String y, double z) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Object[] rowData = {x, y, z};
        model.addRow(rowData);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton CButton1;
    private javax.swing.JRadioButton CButton2;
    private javax.swing.JButton Count;
    private javax.swing.JLabel ImpeText;
    private javax.swing.JRadioButton KButton1;
    private javax.swing.JRadioButton KButton2;
    private javax.swing.JButton Mode;
    private javax.swing.JRadioButton RButton1;
    private javax.swing.JRadioButton RButton2;
    private javax.swing.JButton Reset;
    private javax.swing.JTextField TextFrequency;
    private javax.swing.JTextField TextValues1;
    private javax.swing.JTextField TextValues2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
